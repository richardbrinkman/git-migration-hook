#!/bin/sh

#The MIT License (MIT)

#Copyright (c) 2015 Richard Brinkman https://github.com/richardbrinkman/git-migration-hook.git
#
#Permission is hereby granted, free of charge, to any person obtaining a copy
#of this software and associated documentation files (the "Software"), to deal
#in the Software without restriction, including without limitation the rights
#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#copies of the Software, and to permit persons to whom the Software is
#furnished to do so, subject to the following conditions:
#
#The above copyright notice and this permission notice shall be included in all
#copies or substantial portions of the Software.
#
#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#SOFTWARE.

#************* Configuration **************

#Set the MIGRATION_PATH to the directory where you store all the *{up,down}.sql files
MIGRATION_PATH="migrations"

#Set the script where the sql queries should be piped to, for example:
#OUTPUT="mysql --host=127.0.0.1 --user=root --password=mypassword --database=mydatabase"
#defaults to show only:
OUTPUT="cat"

#********** End of configuration **********

#test if migration path is valid.
if [ ! -d "$MIGRATION_PATH" ]; then
  echo '*** GIT-MIGRATION-HOOK: directory for migrations does not exist.'
  echo '***                     The path is configurable and is currently gitRoot/'$MIGRATION_PATH
  exit -1
fi

git cat-file -p HEAD | grep ^parent | (
	read type leftcommit
	read type rightcommit
	if [ "$rightcommit" = "" ]; then #Fast forward merge
		leftcommit="HEAD@{1}"
		rightcommit="HEAD"
	fi
	for ref in `git rev-list --reverse $leftcommit..$rightcommit`; do
		git show --pretty=oneline --name-only $ref | tail -n +2 | grep ^$MIGRATION_PATH | grep up.sql\$ | sort | while read file; do
			echo "--" "$file"
			git show $ref:"$file" | $OUTPUT
		done
	done
)
